generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  password  String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?
  name      String?
  tokens    Token[]

  @@map("users")
}

model Token {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "tokens_userId_fkey")
  @@map("tokens")
}

model Engineer {
  id           String         @id @unique @default(uuid())
  name         String
  address      String?
  phone        String
  bank_name    String?
  bank_number  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SellServices SellServices[]
}

model Foreman {
  id              String            @id @unique @default(uuid())
  name            String
  address         String?
  phone           String
  bank_name       String?
  bank_number     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ServiceInvoices ServiceInvoices[]
}

model Supplier {
  id               String             @id @unique @default(uuid())
  name             String
  address          String?
  phone            String
  company          String?
  bank_name        String?
  bank_number      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Products         Products[]
  PurchaseProducts PurchaseProducts[]
}

model Customer {
  id              String            @id @unique @default(uuid())
  name            String
  address         String?
  phone           String
  bank_name       String?
  bank_number     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Car             Car[]
  SellProducts    SellProducts[]
  ServiceInvoices ServiceInvoices[]
}

model Setting {
  id               String  @id @unique @default(uuid())
  workshop_name    String
  workshop_logo    String?
  workshop_npwp    String?
  workshop_address String
  tax_services     Int?
  tax_products     Int?
}

model Car {
  id              String            @id @unique @default(uuid())
  model           String
  plat_number     String            @unique
  color           String
  mileage         Float?
  chassis_number  String?
  engine_number   String?
  customerId      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  customer        Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  ServiceInvoices ServiceInvoices[]

  @@index([customerId], map: "Car_customerId_fkey")
}

model Products {
  id               String             @id @unique @default(uuid())
  code             String             @unique
  name             String
  brand            String?
  location         String
  purchase_price   Float
  selling_price    Float
  product_type     ProductType
  stock            Float
  min_stock_alert  Int
  supplierId       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  supplier         Supplier?          @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  SellProducts     SellProducts[]
  PurchaseProducts PurchaseProducts[]

  @@index([supplierId], map: "Products_supplierId_fkey")
}

model Services {
  id               String         @id @unique @default(uuid())
  code             String         @unique
  name             String
  description      String?
  cost             Float
  engineer_payment Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  SellServices     SellServices[]
}

model SellProducts {
  id                String           @id @unique @default(uuid())
  qty               Int
  selling_price     Float
  is_guarantee      Boolean?         @default(false)
  discount          Float?
  productId         String
  customerId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  customer          Customer?        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product           Products         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productInvoices   ProductInvoices? @relation(fields: [productInvoicesId], references: [id])
  productInvoicesId String?
  serviceInvoices   ServiceInvoices? @relation(fields: [serviceInvoicesId], references: [id])
  serviceInvoicesId String?

  @@index([customerId], map: "SellProducts_customerId_fkey")
  @@index([productId], map: "SellProducts_productId_fkey")
  @@index([productInvoicesId], map: "SellProducts_productInvoicesId_fkey")
}

model ProductInvoices {
  id               String         @id @unique @default(uuid())
  invoice_code     String         @unique
  transaction_date DateTime?
  payment_date     DateTime?
  transfer_detail  String?
  payment_method   PaymentMethod?
  payment_status   PaymentStatus? @default(WAITING)
  tax              Int?
  paid_amount      Float?
  discount         Float?
  paid_total       Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  SellProducts     SellProducts[]
}

model SellServices {
  id                String           @id @unique @default(uuid())
  discount          Float?
  cost              Float
  total_cost        Float?
  servicesId        String?
  engineerId        String?
  serviceInvoicesId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  engineer          Engineer?        @relation(fields: [engineerId], references: [id])
  service_invoice   ServiceInvoices? @relation(fields: [serviceInvoicesId], references: [id])
  service_type      Services?        @relation(fields: [servicesId], references: [id])

  @@index([engineerId], map: "SellServices_engineerId_fkey")
  @@index([serviceInvoicesId], map: "SellServices_serviceInvoicesId_fkey")
  @@index([servicesId], map: "SellServices_servicesId_fkey")
}

model ServiceInvoices {
  id                String           @id @unique @default(uuid())
  invoice_code      String
  estimation_code   String?
  date_in           DateTime?
  date_out          DateTime?
  request_job       Json?
  remark            String?
  carId             String?
  status            StatusService?   @default(QUEUE)
  cost_service      Float?
  cost_product      Float?
  transaction_type  TransactionType?
  tax               Float?
  work_order_number String           @unique
  transfer_detail   String?
  payment_date      DateTime?
  payment_method    PaymentMethod?   @default(CASH)
  payment_status    PaymentStatus?   @default(WAITING)
  stay              Boolean?         @default(false)
  number_queue      Int?
  paid_total        Float?
  paid_amount       Float?
  foremanId         String?
  customerId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  SellProducts      SellProducts[]
  SellServices      SellServices[]
  car               Car?             @relation(fields: [carId], references: [id])
  Customer          Customer?        @relation(fields: [customerId], references: [id])
  Foreman           Foreman?         @relation(fields: [foremanId], references: [id])

  @@index([carId], map: "ServiceInvoices_carId_fkey")
  @@index([customerId], map: "ServiceInvoices_customerId_fkey")
  @@index([foremanId], map: "ServiceInvoices_foremanId_fkey")
}

model PurchaseProducts {
  id              String        @id @unique @default(uuid())
  invoice_code    String
  purchase_date   DateTime
  qty             Int
  purchase_price  Float
  payment_method  PaymentMethod
  payment_status  PaymentStatus
  transfer_detail String?
  productId       String
  supplierId      String
  product         Products      @relation(fields: [productId], references: [id])
  supplier        Supplier      @relation(fields: [supplierId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum Role {
  ADMIN
  SUPERADMIN
}

enum ProductType {
  MATERIAL
  OIL
  SPAREPART
  SUBLET
}

enum PaymentMethod {
  CASH
  TRANSFER
  DEBIT
}

enum PaymentStatus {
  PAID
  WAITING
  DEBT
}

enum StatusService {
  QUEUE
  PROGRESS
  PENDING
  CLOSE
  QCPASSED
  DONE
}

enum TransactionType {
  EXTERNAL
  INTERNAL
  GUARANTEE
}
